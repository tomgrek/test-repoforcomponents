{ "title"           : "Header",
  "uuid"            : null,
  "content"         : "<div style=\"position: absolute; top: 1.5rem;\">\n    <h1 id=\"texttodisplay\"></h1>\n  </div>",
  "preview"         : "<img style=\"height:100%; width:100%;\" src=\"https://placehold.it/200x100\"></img>",
  "data"            : {},
  "dataSources"     : [],
  "dataSinks"       : [],
  "defaultSettings" : {},
  "settings"        : { "texttodisplay" : "Default Text" },
  "settingsDisplay" : "<div>\n      <p>Settings for remote component<p>\n      <p>Nothing useful here -- just a basic component that displays text.</p>\n      <div>Set the titlebar title: <input id=\"title\" type=\"text\"></input></div>\n      <div>And the text: <input id=\"texttodisplay\" type=\"text\"></input></div>\n    </div>",
  "height"          : 100,
  "width"           : 200,
  "transform"       : "",
  "offsetX"         : 0,
  "offsetY"         : 0,
  "script"          : "\n            const drawChart = (e) => {\n              if (!e) e = { detail: {} };\n              let height = (e.detail.height || this.height) - 24; // 24=1.5rem=title bar\n              let width = e.detail.width || this.width;\n              let svg;\n              if (!node.children[0].querySelector('svg')) {\n                node.children[0].innerHTML = '';\n                svg = d3.select(node.children[0]).append(\"svg\");\n                svg.attr(\"height\", height);\n                svg.attr(\"width\", width);\n                this.settings.svg = svg;\n              } else {\n                svg = this.settings.svg;\n\n                if (svg.attr('height') != height || svg.attr('width') != width) {\n                  node.children[0].innerHTML = '';\n                  svg = d3.select(node.children[0]).append(\"svg\");\n                  svg.attr(\"height\", height);\n                  svg.attr(\"width\", width);\n                  this.settings.svg = svg;\n                }\n              }\n              svg.selectAll('text').remove();\n              svg.selectAll('text')\n                .data([this.settings.texttodisplay])\n                .enter().append('text')\n                .attr(\"x\", width/2)\n                .attr(\"y\", height/2)\n                .text(d => d)\n                .attr('font-family', 'Roboto Slab, sans-serif')\n                .attr('dominant-baseline', 'middle')\n                .attr('text-anchor', 'middle')\n                .attr(\"font-size\", (1.5*width/this.settings.texttodisplay.length)+'px');\n            };\n            node.addEventListener('dblclick', e => {\n              e.preventDefault();\n              e.stopPropagation();\n            });\n            node.addEventListener('created', e => {\n              this.uuid = e.detail.uuid;\n              let styleNode = document.createElement('style');\n              let styleFactory = new Function('uuid', this.style);\n              styleNode.innerHTML = styleFactory(this.uuid);\n              styleNode.id = 'style-'+this.uuid;\n              document.body.appendChild(styleNode);\n              drawChart(e);\n            });\n            node.addEventListener('resized', (e) => {\n              drawChart(e);\n            });\n            node.addEventListener('settingsChanged', (e) => {\n              drawChart(e);\n            });\n            node.addEventListener('moved', (e) => {\n              this.transform = e.detail.transform;\n              this.offsetX = e.detail.offsetX;\n              this.offsetY = e.detail.offsetY;\n            });\n          ",
  "style"           : "return '#'+uuid+' { color: red; stroke-width: 3px; }' " }
